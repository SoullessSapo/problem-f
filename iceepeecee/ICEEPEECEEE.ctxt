#BlueJ class context
comment0.target=ICEEPEECEEE
comment0.text=\r\n\ In\ this\ class\ we\ solved\ the\ problem\ F.\r\n\r\n\ @author\ Andrea\ Camila\ Torres\r\n\ @author\ Esteban\ Valencia\r\n\ @version\ 1.2\r\n
comment1.params=length\ width
comment1.target=ICEEPEECEEE(int,\ int)
comment1.text=\r\n\ Constructor\ para\ objetos\ de\ la\ clase\ ICEEPEECEEE.\r\n
comment10.params=flight
comment10.target=int[][]\ flightLocation(java.lang.String)
comment10.text=\r\n\ M\u00E9todo\ para\ encontrar\ la\ ubicaci\u00F3n\ de\ un\ vuelo\ con\ color\ especificado.\r\n\ @param\ El\ color\ del\ vuelo.\r\n
comment11.params=color
comment11.target=int\ flightCamera(java.lang.String)
comment11.text=\r\n\ M\u00E9todo\ para\ encontrar\ el\ angulo\ del\ vuelo.\r\n\ @param\ El\ color\ del\ vuelo.\r\n\ @return\ int\ angulo\ de\ la\ camara\ del\ vuelo.\r\n
comment12.params=
comment12.target=void\ makeVisible()
comment12.text=\r\n\ M\u00E9todo\ para\ hacer\ visible\ todo\ lo\ creado.\r\n
comment13.params=
comment13.target=void\ makeInvisible()
comment13.text=\r\n\ M\u00E9todo\ para\ hacer\ invisible\ todo\ lo\ creado.\r\n
comment14.params=
comment14.target=void\ finish()
comment14.text=\r\n\ M\u00E9todo\ que\ termina\ el\ programa.\r\n
comment15.params=
comment15.target=boolean\ ok()
comment15.text=\r\n\ M\u00E9todo\ que\ verififica\ si\ la\ ultima\ accion\ pudo\ realizarce.\r\n
comment16.params=teta
comment16.target=void\ photograph(float)
comment16.text=\r\n\ Metodo\ para\ crear\ una\ fotografia\ de\ todos\ los\ vuelos\ con\ el\ mismo\ angulo.\r\n\ @param\ float\ teta\ angulo\ de\ la\ fotograf\u00EDa.\r\n
comment17.params=
comment17.target=java.lang.String[]\ islands()
comment17.text=\r\n\ Metodo\ para\ obtener\ los\ colores\ de\ los\ vuelos\ construidos.\r\n\ @return\ ArrayList<String>\ lista\ con\ los\ colores\ de\ las\ islas.\r\n
comment18.params=
comment18.target=java.lang.String[]\ flights()
comment18.text=\r\n\ Metodo\ para\ obtener\ los\ colores\ de\ los\ vuelos\ construidos.\r\n\ @return\ ArrayList<String>\ lista\ con\ los\ colores\ de\ los\ vuelos.\r\n
comment19.params=
comment19.target=java.lang.String[]\ observedIslands()
comment19.text=\r\n\ Metodo\ para\ obtener\ los\ colores\ de\ las\ islas\ fotografiadas.\r\n\ @return\ ArrayList<String>\ lista\ con\ los\ colores\ de\ las\ islas\ fotografiadas.\r\n
comment2.params=islands\ flights
comment2.target=ICEEPEECEEE(int[][][],\ int[][][])
comment2.text=\r\n\ Constructor\ para\ objetos\ de\ la\ clase\ ICEEPEECEEE.\r\n\ Inicializa\ la\ variable\ de\ instancia\ islas\ y\ flights\ con\ un\ arrayList.\r\n
comment20.params=
comment20.target=java.lang.String[]\ uselessFlights()
comment20.text=\r\n\ Metodo\ para\ obtener\ los\ vuelos\ in\u00FAtiles\ (los\ que\ no\ tomaron\ foto).\r\n\ @return\ ArrayList<String>\ lista\ con\ los\ colores\ de\ las\ vuelos\ que\ no\ toman\ fotografia\ de\ las\ islas.\r\n
comment21.params=type\ color\ polygon
comment21.target=void\ addIsland(java.lang.String,\ java.lang.String,\ int[][])
comment21.text=\r\n\ M\u00E9todo\ para\ agregar\ una\ isla\ con\ color\ y\ puntos\ de\ pol\u00EDgono\ especificados.\r\n\ @param\ type\ Tipo\ de\ isla.\r\n\ @param\ color\ El\ color\ de\ la\ isla.\r\n\ @param\ polygon\ Un\ arreglo\ de\ arreglos\ de\ enteros\ que\ representan\ puntos\ de\ pol\u00EDgono.\r\n
comment22.params=type\ color\ from\ to
comment22.target=void\ addFlight(java.lang.String,\ java.lang.String,\ int[],\ int[])
comment22.text=\r\n\ M\u00E9todo\ para\ agregar\ un\ vuelo\ con\ un\ color\ especificado.\r\n\ @param\ type\ Tipo\ de\ vuelo.\r\n\ @param\ color\ El\ color\ del\ vuelo.\r\n\ @param\ from\ punto\ de\ inicio\ del\ vuelo.\r\n\ @param\ to\ punto\ final\ del\ vuelo.\r\n
comment23.params=islands
comment23.target=void\ createIslands(int[][][])
comment23.text=\r\n\ Metodo\ auxiliar\ para\ crear\ las\ islas\ como\ la\ entrada\ del\ problem\ F.\r\n
comment24.params=newFlights
comment24.target=void\ createFlights(int[][][])
comment24.text=\r\n\ Metodo\ auxiliar\ para\ crear\ los\ vuelos\ como\ la\ entrada\ del\ problem\ F.\r\n
comment25.params=
comment25.target=java.lang.String\ chooseColor()
comment25.text=\r\n\ Metodo\ auxiliar\ para\ elegir\ colores\ al\ azar\ en\ formato\ rgb.\r\n
comment26.params=red\ green\ blue
comment26.target=java.lang.String\ convertRGBtoHex(int,\ int,\ int)
comment26.text=\r\n\ Metodo\ auxiliar\ para\ pasar\ de\ rgb\ a\ formato\ hexadecimal.\r\n
comment27.params=
comment27.target=java.util.ArrayList\ notUselessFlights()
comment27.text=\r\n\ Metodo\ para\ obtener\ los\ vuelos\ de\ las\ islas\ fotografiadas.\r\n\ @return\ ArrayList<String>\ lista\ con\ los\ colores\ de\ las\ vuelos\ que\ tomaron\ la\ fotograf\u00EDa.\r\n
comment28.params=i
comment28.target=boolean\ observed(Island)
comment28.text=\r\n\ Metodo\ para\ saber\ si\ una\ isla\ est\u00E1\ fotografiada.\r\n\ @return\ boolean\ isObserved\ booleano\ indicando\ si\ est\u00E1\ fotografiada.\r\n
comment29.params=color\ polygon
comment29.target=boolean\ okIsland(java.lang.String,\ int[][])
comment29.text=\r\n\ M\u00E9todo\ para\ realizar\ verificar\ si\ una\ isla\ es\ v\u00E1lida.\r\n
comment3.params=color\ polygon
comment3.target=void\ addIsland(java.lang.String,\ int[][])
comment3.text=\r\n\ M\u00E9todo\ para\ agregar\ una\ isla\ con\ color\ y\ puntos\ de\ pol\u00EDgono\ especificados.\r\n\ @param\ color\ El\ color\ de\ la\ isla.\r\n\ @param\ polygon\ Un\ arreglo\ de\ arreglos\ de\ enteros\ que\ representan\ puntos\ de\ pol\u00EDgono.\r\n
comment30.params=color\ from\ to
comment30.target=boolean\ okFlight(java.lang.String,\ int[],\ int[])
comment30.text=\r\n\ M\u00E9todo\ para\ realizar\ verificar\ si\ un\ vuelo\ es\ v\u00E1lido.\r\n
comment31.params=color
comment31.target=Island\ getIsland(java.lang.String)
comment31.text=\r\n\ M\u00E9todo\ para\ devolver\ una\ isla\ con\ el\ color\ indicado.\r\n
comment32.params=color
comment32.target=Flight\ getFlight(java.lang.String)
comment32.text=\r\n\ M\u00E9todo\ para\ devolver\ un\ vuelo\ con\ el\ color\ indicado.\r\n
comment33.params=array
comment33.target=java.lang.String[]\ convertArrayListToArray(java.util.ArrayList)
comment33.text=\r\n\ M\u00E9todo\ para\ convertir\ una\ ArrayList\ a\ Array.\r\n
comment34.params=angle
comment34.target=boolean\ verifyAngle(float)
comment34.text=\r\n\ M\u00E9todo\ para\ verificar\ el\ angulo.\r\n
comment35.params=polygon
comment35.target=boolean\ intesectingIsland(int[][])
comment35.text=\r\n\ M\u00E9todo\ para\ verificar\ si\ una\ isla\ est\u00E1\ intersectada.\r\n
comment36.params=n\ m
comment36.target=boolean\ verifyTablero(int,\ int)
comment36.text=\r\n\ M\u00E9todo\ para\ verificar\ si\ el\ tablero\ es\ v\u00E1lido.\r\n
comment4.params=color\ from\ to
comment4.target=void\ addFlight(java.lang.String,\ int[],\ int[])
comment4.text=\r\n\ M\u00E9todo\ para\ agregar\ un\ vuelo\ con\ un\ color\ especificado.\r\n\ @param\ color\ El\ color\ del\ vuelo.\r\n
comment5.params=flight\ teta
comment5.target=void\ photograph(java.lang.String,\ float)
comment5.text=\r\n\ Metodo\ para\ crear\ una\ fotografia.\r\n\ @param\ String\ flight\ color\ del\ vuelo\ a\ tomar\ la\ fotograf\u00EDa.\r\n\ @param\ double\ teta\ angulo\ de\ la\ fotograf\u00EDa.\r\n
comment6.params=teta
comment6.target=void\ photograph(int)
comment6.text=\r\n\ Metodo\ para\ crear\ una\ fotografia\ de\ todos\ los\ vuelos\ con\ el\ mismo\ angulo.\r\n\ @param\ int\ teta\ angulo\ de\ la\ fotograf\u00EDa.\r\n
comment7.params=color
comment7.target=void\ delIsland(java.lang.String)
comment7.text=\r\n\ M\u00E9todo\ para\ eliminar\ una\ isla\ con\ color\ especificado.\r\n\ @param\ color\ El\ color\ de\ la\ isla.\r\n
comment8.params=color
comment8.target=void\ delFlight(java.lang.String)
comment8.text=\r\n\ M\u00E9todo\ para\ eliminar\ una\ vuelo\ con\ color\ especificado.\r\n\ @param\ El\ color\ del\ vuelo.\r\n
comment9.params=island
comment9.target=int[][]\ islandLocation(java.lang.String)
comment9.text=\r\n\ M\u00E9todo\ para\ obtener\ la\ ubicaci\u00F3n\ de\ una\ isla\ con\ color\ especificado.\r\n\ @param\ El\ color\ de\ la\ isla.\r\n
numComments=37
